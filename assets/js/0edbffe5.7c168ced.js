"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[354],{3846:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>n,metadata:()=>o,toc:()=>c});var i=t(4848),s=t(8453);const n={sidebar_position:3},r="BigQuery",o={id:"Modules/BigQuery",title:"BigQuery",description:"The BigQuery module is more complete than others, it allows the common transformation of the library,",source:"@site/../docs/Modules/BigQuery.md",sourceDirName:"Modules",slug:"/Modules/BigQuery",permalink:"/big-data-types/docs/Modules/BigQuery",draft:!1,unlisted:!1,editUrl:"https://github.com/data-tools/big-data-types/edit/main/website/../docs/Modules/BigQuery.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Big Data Types",permalink:"/big-data-types/docs/intro"},next:{title:"Spark",permalink:"/big-data-types/docs/Modules/Spark"}},l={},c=[{value:"Create BigQuery Tables",id:"create-bigquery-tables",level:2},{value:"Transform field names",id:"transform-field-names",level:3},{value:"Time Partitioned tables",id:"time-partitioned-tables",level:3},{value:"Create a table with more than one Case Class",id:"create-a-table-with-more-than-one-case-class",level:3},{value:"Create BigQuery schema from a Case Class",id:"create-bigquery-schema-from-a-case-class",level:2},{value:"From a Case Class instance",id:"from-a-case-class-instance",level:2},{value:"From any other type",id:"from-any-other-type",level:2},{value:"Connecting to your BigQuery environment",id:"connecting-to-your-bigquery-environment",level:2}];function d(e){const a={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.h1,{id:"bigquery",children:"BigQuery"}),"\n",(0,i.jsx)(a.p,{children:"The BigQuery module is more complete than others, it allows the common transformation of the library,\nwhich is the transformation from other types into BigQuery, and BigQuery types into others."}),"\n",(0,i.jsxs)(a.p,{children:["This module also includes a complete integration with a BigQuery environment, meaning that if BigQuery credentials\nare given, ",(0,i.jsx)(a.strong,{children:"the library include methods to create tables in BigQuery"}),", directly using other types."]}),"\n",(0,i.jsx)(a.h2,{id:"create-bigquery-tables",children:"Create BigQuery Tables"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-scala",children:'import org.datatools.bigdatatypes.bigquery.BigQueryTable\nimport org.datatools.bigdatatypes.formats.Formats.implicitDefaultFormats\n\ncase class MyTable(field1: Int, field2: String)\nBigQueryTable.createTable[MyTable]("dataset_name", "table_name")\n'})}),"\n",(0,i.jsxs)(a.p,{children:["This also works with Structs, Lists and Options.\nSee more examples in ",(0,i.jsx)(a.a,{href:"https://github.com/data-tools/big-data-types/blob/main/bigquery/src/it/scala/org/datatools/bigdatatypes/bigquery/BigQueryTableSpec.scala",children:"Tests"})]}),"\n",(0,i.jsx)(a.h3,{id:"transform-field-names",children:"Transform field names"}),"\n",(0,i.jsxs)(a.p,{children:["There is a ",(0,i.jsx)(a.code,{children:"Format"})," object that allows us to decide how to transform field names, for example, changing CamelCase for snake case"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-scala",children:'import org.datatools.bigdatatypes.bigquery.BigQueryTable\nimport org.datatools.bigdatatypes.formats.Formats.implicitSnakifyFormats\n\ncase class MyTable(myIntField: Int, myStringField: String)\nBigQueryTable.createTable[MyTable]("dataset_name", "table_name")\n//This table will have my_int_field and my_string_field fields\n'})}),"\n",(0,i.jsxs)(a.admonition,{type:"tip",children:[(0,i.jsx)(a.p,{children:"Tables can be created using directly an instance of any other type of the library. Example from Spark:"}),(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-scala",children:'val df: Dataframe = ???\nval schema: StructType = df.schema\nBigQueryTable.createTable[StructType](schema, "dataset_name", "table_name")\n'})})]}),"\n",(0,i.jsx)(a.h3,{id:"time-partitioned-tables",children:"Time Partitioned tables"}),"\n",(0,i.jsxs)(a.p,{children:["Using a ",(0,i.jsx)(a.code,{children:"Timestamp"})," or ",(0,i.jsx)(a.code,{children:"Date"})," field, tables can be partitioned in BigQuery using a ",(0,i.jsx)(a.a,{href:"https://cloud.google.com/bigquery/docs/creating-column-partitions",children:"Time Partition Column"})]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-scala",children:'import org.datatools.bigdatatypes.bigquery.BigQueryTable\nimport org.datatools.bigdatatypes.formats.Formats.implicitSnakifyFormats\n\ncase class MyTable(field1: Int, field2: String, myPartitionField: java.sql.Timestamp)\nBigQueryTable.createTable[MyTable]("dataset_name", "table_name", "my_partition_field")\n'})}),"\n",(0,i.jsx)(a.h3,{id:"create-a-table-with-more-than-one-case-class",children:"Create a table with more than one Case Class"}),"\n",(0,i.jsxs)(a.p,{children:["In many cases we work with a Case Class that represents our data but we also want to add\nsome metadata fields like ",(0,i.jsx)(a.code,{children:"updated_at"}),", ",(0,i.jsx)(a.code,{children:"received_at"}),", ",(0,i.jsx)(a.code,{children:"version"})," and so on.\nIn these cases we can work with multiple Case Classes and fields will be concatenated:"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-scala",children:'import org.datatools.bigdatatypes.bigquery.BigQueryTable\nimport org.datatools.bigdatatypes.formats.Formats.implicitDefaultFormats\n\ncase class MyData(field1: Int, field2: String)\ncase class MyMetadata(updatedAt: Long, version: Int)\nBigQueryTable.createTable[MyData, MyMetadata]("dataset_name", "table_name")\n'})}),"\n",(0,i.jsx)(a.p,{children:"This can be done up to 5 concatenated classes"}),"\n",(0,i.jsx)(a.h2,{id:"create-bigquery-schema-from-a-case-class",children:"Create BigQuery schema from a Case Class"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-scala",children:"import com.google.cloud.bigquery.{Field, Schema}\nimport org.datatools.bigdatatypes.formats.Formats.implicitDefaultFormats\nimport org.datatools.bigdatatypes.bigquery.BigQueryTypes\n\ncase class MyTable(field1: Int, field2: String)\n//List of BigQuery Fields, it can be used to construct an Schema\nval fields: List[Field] = BigQueryTypes[MyTable].bigQueryFields\n//BigQuery Schema, it can be used to create a table\nval schema: Schema = Schema.of(fields.asJava)\n"})}),"\n",(0,i.jsx)(a.p,{children:"Or use the provided extension method for the creation of the Schema"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-scala",children:"val fields: List[Field] = BigQueryTypes[MyTable].bigQueryFields\nval schema: Schema = fields.schema\n"})}),"\n",(0,i.jsx)(a.h2,{id:"from-a-case-class-instance",children:"From a Case Class instance"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-scala",children:'import com.google.cloud.bigquery.Field\nimport org.datatools.bigdatatypes.formats.Formats.implicitDefaultFormats\nimport org.datatools.bigdatatypes.bigquery.BigQueryTypes._\n\ncase class MyTable(field1: Int, field2: String)\nval data = MyTable(1, "test")\nval fields: List[Field] = data.asBigQuery\n'})}),"\n",(0,i.jsx)(a.h2,{id:"from-any-other-type",children:"From any other type"}),"\n",(0,i.jsx)(a.p,{children:"e.g: Spark Schema"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-scala",children:"val myDataframe: Dataframe = ???\nval bqFields: List[Field] = myDataframe.schema.asBigQuery\nval bqSchema: Schema = myDataframe.schema.asBigQuery.schema\n"})}),"\n",(0,i.jsxs)(a.p,{children:["See more info about ",(0,i.jsx)(a.a,{href:"https://cloud.google.com/bigquery/docs/tables#java",children:"creating tables on BigQuery"})," in the official documentation"]}),"\n",(0,i.jsx)(a.h2,{id:"connecting-to-your-bigquery-environment",children:"Connecting to your BigQuery environment"}),"\n",(0,i.jsx)(a.p,{children:"If you want to create tables using the library you will need to connect to your BigQuery environment\nthrough any of the GCloud options.\nProbably the most common will be to specify a service account and a project id.\nIt can be added on environment variables. The library expects:"}),"\n",(0,i.jsxs)(a.ul,{children:["\n",(0,i.jsxs)(a.li,{children:["PROJECT_ID: ",(0,i.jsx)(a.code,{children:"<your_project_id>"})]}),"\n",(0,i.jsxs)(a.li,{children:["GOOGLE_APPLICATION_CREDENTIALS: ",(0,i.jsx)(a.code,{children:"<path_to_your_service_account_json_file>"})]}),"\n"]}),"\n",(0,i.jsx)(a.hr,{})]})}function m(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,a,t)=>{t.d(a,{R:()=>r,x:()=>o});var i=t(6540);const s={},n=i.createContext(s);function r(e){const a=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(n.Provider,{value:a},e.children)}}}]);